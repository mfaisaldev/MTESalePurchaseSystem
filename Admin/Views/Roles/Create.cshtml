@model Admin.Models.Role
@using Admin.Helpers;
@{
    MenuItem mi = new MenuItem();


    if (Model.RoleId == Guid.Empty)
    {
        ViewData["Title"] = "Role - Create";
        mi.Name = "Role Create";
        mi.URL = "Create";
        Response.Redirect("Index");
            }
            else
            {
                ViewData["Title"] = "Role - Edit";
                mi.Name = "Role Edit";
                mi.URL = "Create/" + Model.RoleId.ToString();

            }
            ViewData["Active"] = "Role";

            mi.UserIdentity = User.Identity.Name;
            HtmlHelpers.topMenuListClear(mi);
            HtmlHelpers.topMenuListAdd(mi);

            List<Admin.Models.Menu> mlist = new Account().AccessMenu(User.Identity.Name);
            ViewData["mlist"] = mlist;
}
@if (mlist.Where(u => u.MenuId.ToString().ToUpper() == Utilities.Menu_Role).FirstOrDefault() != null)
{



    using (Html.BeginForm("Create", "Roles", FormMethod.Post, new { @class = "form-horizontal form-seperated form-row-stripped" }))
    {
        @Html.AntiForgeryToken()
        <div class="form-body">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "col-md-3 control-label" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    <div class="text-danger">@ViewBag.Error</div>
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "col-md-3 control-label" })
                <div class="col-md-4">
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "col-md-3 control-label" })
                <div class="col-md-4">
                    <div class="radio">
                        @foreach (var item in Model.Status)
                    {
                        if (Model.RoleId == Guid.Empty && item.StatusId.ToString() == Utilities.Status_InActive)
                        {
                                @Html.RadioButtonFor(m => m.StatusId, item.StatusId.ToString(), new { @class = "form-control", @checked = "checked" });
                        }
                        else
                        {
                                @Html.RadioButtonFor(m => m.StatusId, item.StatusId.ToString(), new { @class = "form-control" });
                        }
                            @:
                            @item.Name ;
                            @:
                    }
                    </div>
                </div>
            </div>
        </div>
        @Html.HiddenFor(model => model.RoleId)
        <div class="form-actions text-right pal">
            @if (Model.RoleId == Guid.Empty)
            {
                <input type="submit" value="Create Role" name="action" class="btn btn-primary" />
            }
            else
            {
                <input type="submit" value="Edit Role" name="action" class="btn btn-primary" />
                @:
                @*<input type="submit" value="Delete Role" name="action" onclick="return confirm('Are you sure to delete this record ?')" class="btn btn-danger" />*@

            }
            @Html.ActionLink("Back to List", "Index", "Roles", null, new { @class = "btn btn-green" })

        </div>
    }
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}



