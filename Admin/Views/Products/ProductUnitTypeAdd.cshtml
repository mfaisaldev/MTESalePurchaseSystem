@model Admin.Models.ProductUnitType
@using Admin.Helpers;
@{
    MenuItem mi = new MenuItem();
    if (Model.ProductUnitTypeId == Guid.Empty)
    {
        ViewData["Title"] = Model.ProductName + " UnitType Create";
        mi.Name = ViewData["Title"].ToString();
        mi.URL = "ProductUnitTypeAdd";
    }
    else
    {
        ViewData["Title"] = Model.ProductName + " UnitType - Edit";
        mi.Name = ViewData["Title"].ToString();
        mi.URL = "UnitTypeAdd/" + Model.ProductUnitTypeId.ToString();
    }
    ViewData["Active"] = "Product";
    mi.UserIdentity = User.Identity.Name;
    HtmlHelpers.topMenuListAdd(mi);
    Account a = new Account();
    List<Admin.Models.Menu> mlist = a.AccessMenu(User.Identity.Name);
    ViewData["mlist"] = mlist;
}
@if (mlist.Where(u => u.MenuId.ToString().ToUpper() == Utilities.Menu_Product).FirstOrDefault() != null)
{

    using (Html.BeginForm("ProductUnitTypeAdd", "Products", FormMethod.Post, new { @class = "form-horizontal form-seperated form-row-stripped" }))
    {
        @Html.AntiForgeryToken();
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-body">
            <div class="col-md-6">
                <div class="form-group"></div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Unit, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.UnitId, new SelectList(Model.Unit, "Value", "Text"), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ComparableUnit, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.ComparableUnit, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ComparableUnit, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Factor, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Factor, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Factor, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Height, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Height, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Height, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ISOCode, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.ISOCode, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ISOCode, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Location , htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Rounding, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Rounding, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Rounding, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.SplitPurchase, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.SplitPurchase, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SplitPurchase, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.SplitSales, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.SplitSales, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SplitSales, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group"></div>
                <div class="form-group">
                    @Html.LabelFor(model => model.UnitInPurchase, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.UnitInPurchase, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UnitInPurchase, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.UnitInSales, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.UnitInSales, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UnitInSales, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.UnitInStockControl, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.UnitInStockControl, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UnitInStockControl, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.UnitNamePurchase, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.UnitNamePurchase, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UnitNamePurchase, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.VariableQty, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.VariableQty, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.VariableQty, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.PackingType, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.PackingType, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PackingType, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Volume, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Volume, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Volume, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Weight, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Weight, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Width, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Width, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Width, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Length, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Length, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Length, "", new { @class = "text-danger" })
                    </div>
                </div>
                 <div class="form-group">
                    @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "col-md-4 control-label" })
                    <div class="col-md-8">
                        <div class="radio">
                            @foreach (var item in Model.Status)
                    {
                        if (Model.ProductUnitTypeId == Guid.Empty && item.Value == Utilities.Status_Active)
                        {
                                    @Html.RadioButtonFor(m => m.myStatus, item.Value, new { @class = "form-control", @checked = "checked" });
                        }
                        else
                        {
                                    @Html.RadioButtonFor(m => m.myStatus, item.Value, new { @class = "form-control" });
                        }
                                @:
                                @item.Text;
                                @:
                    }
                        </div>
                    </div>
                </div>
            </div>
            </div>
        @Html.HiddenFor(model => model.ProductUnitTypeId)
        @Html.HiddenFor(model => model.ProductId)
        <div class="form-actions text-right pal">
            @if (Model.ProductUnitTypeId == Guid.Empty)
            {
                <input type="submit" value="Create Product UnitType" name="action" class="btn btn-primary" />
            }
            else
            {
                <input type="submit" value="Edit Product UnitType" name="action" class="btn btn-primary" />
                    @:
                    <input type="submit" value="Delete Product UnitType" name="action" onclick="return confirm('Are you sure to delete this record ?')" class="btn btn-danger" />
            }
            @Html.ActionLink("Back to List", "ProductUnitType", "Products", new { ProductId = Model.ProductId }, new { @class = "btn btn-green" })
        </div>
    }
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}



