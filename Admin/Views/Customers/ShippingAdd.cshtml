@model Admin.Models.CustomerShipping
@using Admin.Helpers;
@{
    MenuItem mi = new MenuItem();
    if (Model.CustomerShippingId  == Guid.Empty)
    {
        ViewData["Title"] = Model.CustomerName + " Shipping Address - Create";
        mi.Name = ViewData["Title"].ToString();
        mi.URL = "ShippingAdd";
    }
    else
    {
        ViewData["Title"] = Model.CustomerName + " Shipping Address - Edit";
        mi.Name = ViewData["Title"].ToString();
        mi.URL = "ShippingAdd/" + Model.CustomerShippingId.ToString();
    }
    ViewData["Active"] = "Customer";
    mi.UserIdentity = User.Identity.Name;
    HtmlHelpers.topMenuListAdd(mi);
    Account a = new Account();
    List<Admin.Models.Menu> mlist = a.AccessMenu(User.Identity.Name);
    ViewData["mlist"] = mlist;
}
@if (mlist.Where(u => u.MenuId.ToString().ToUpper() == Utilities.Menu_Customer).FirstOrDefault() != null)
{

    using (Html.BeginForm("ShippingAdd", "Customers", FormMethod.Post, new { @class = "form-horizontal form-seperated form-row-stripped" }))
    {
        @Html.AntiForgeryToken();
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-body">
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "col-md-3 control-label" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "col-md-3 control-label" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", type = "email" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "col-md-3 control-label" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Address1, htmlAttributes: new { @class = "col-md-3 control-label" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Address1, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Address2, htmlAttributes: new { @class = "col-md-3 control-label" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Address2, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "col-md-3 control-label" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.PostOffice, htmlAttributes: new { @class = "col-md-3 control-label" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.PostOffice, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PostOffice, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Kommune, htmlAttributes: new { @class = "col-md-3 control-label" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Kommune, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Kommune, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "col-md-3 control-label" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.CountryId, new SelectList(Model.Country, "Value", "Text"), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "col-md-3 control-label" })
                <div class="col-md-4">
                    <div class="radio">
                        @foreach (var item in Model.Status)
                    {
                        if (Model.CustomerShippingId == Guid.Empty && item.Value == Utilities.Status_Active)
                        {
                                @Html.RadioButtonFor(m => m.myStatus, item.Value, new { @class = "form-control", @checked = "checked" });
                        }
                        else
                        {
                                @Html.RadioButtonFor(m => m.myStatus, item.Value, new { @class = "form-control" });
                        }
                            @:
                            @item.Text;
                            @:
                    }
                    </div>
                </div>
            </div>
        </div>
            @Html.HiddenFor(model => model.CustomerShippingId)
        @Html.HiddenFor(model => model.CustomerId)
            <div class="form-actions text-right pal">
                @if (Model.CustomerShippingId  == Guid.Empty)
                    {
                    <input type="submit" value="Create Customer Shipping" name="action" class="btn btn-primary" />
                }
                else
                {
                    <input type="submit" value="Edit Customer Shipping" name="action" class="btn btn-primary" />
                    @:
                    <input type="submit" value="Delete Customer Shipping" name="action" onclick="return confirm('Are you sure to delete this record ?')" class="btn btn-danger" />
                }
                @Html.ActionLink("Back to List", "Shipping", "Customers", new { CustomerId = Model.CustomerId }, new { @class = "btn btn-green" })
            </div>
    }
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}



